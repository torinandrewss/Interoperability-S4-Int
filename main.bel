% Final Project - COMP 527
% Mechanizing Logical Interoperability Between S4 and Intuitionistic Logic
% Authors: Mirek Bourdeau & Torin Andrews (Team Torek)

% ====================================
% Logical Formulas (Intuitionistic + Modal)
% ====================================

LF o : type =                        % Intuitionistic formulas
  | ⊤ : o
  | ⊥ : o
  | ⊃ : o → o → o
  | ∧ : o → o → o
  | ∨ : o → o → o
  | ¬ : o → o;

--prefix ¬ 10.
--infix ∧ 5 right.
--infix ∨ 4 right.
--infix ⊃ 3 right.

LF ml : type =                       % Modal formulas (S4, IS4, Int)
  | imp : ml → ml → ml
  | box : ml → ml;

--infix imp 3 right.

% ====================================
% Natural Deduction Judgment (ND)
% ====================================

LF nd : o → type =
  | ⊃I  : (nd A → nd B) → nd (A ⊃ B)
  | ⊃E  : nd (A ⊃ B) → nd A → nd B
  | ∧I  : nd A → nd B → nd (A ∧ B)
  | ∧El : nd (A ∧ B) → nd A
  | ∧Er : nd (A ∧ B) → nd B
  | ∨Il : nd A → nd (A ∨ B)
  | ∨Ir : nd B → nd (A ∨ B)
  | ∨E  : nd (A ∨ B) → (nd A → nd C) → (nd B → nd C) → nd C
  | ⊤I  : nd ⊤
  | ⊥E  : nd ⊥ → nd C;

% ====================================
% Modal Judgments
% ====================================

LF S4 : ml → type =                  % Classical S4
  | axS4  : S4 A
  | →IS4  : (S4 A → S4 B) → S4 (A imp B)
  | →ES4  : S4 (A imp B) → S4 A → S4 B
  | □IS4  : S4 A → S4 (box A)
  | □ES4  : S4 (box A) → S4 A;

LF I : ml → type =                   % Intuitionistic S4
  | axI  : I A
  | →II  : (I A → I B) → I (A imp B)
  | →EI  : I (A imp B) → I A → I B
  | □II  : I A → I (box A)
  | □EI  : I (box A) → I A;

LF Int : ml → type =                 % Intuitionistic Logic
  | axInt  : Int A
  | →IInt  : (Int A → Int B) → Int (A imp B)
  | →EInt  : Int (A imp B) → Int A → Int B;

% ====================================
% Contexts & Context Relations
% ====================================

schema ctx  = block x:ml;            % Context for modal logics
schema ndctx = block x:o;           % Context for ND logic

%inductive ctxRel : ctx → ndctx → ctype =
%   | ctxRelNil  : ctxRel [] []
%   | ctxRelCons : {Γ : ctx}{Δ : ndctx}{A : ml}{A' : o}{x : name}
%                  ctxRel Γ Δ →
%                  ctxRel (Γ, x:A) (Δ, x:A');













% ====================================
% Translation Utilities and Functions
% ====================================

% --- Formula Translation ---
% Translate modal formulas (ml) into intuitionistic formulas (o)
% For example: box A ↦ ⊤ ⊃ transFml A

rec transFml : {g:ctx} [g ⊢ ml] → [g ⊢ o] =


% --- Translation: S4 to I ---
% Translate derivations from Classical S4 to Intuitionistic S4

rec S4_to_I : {g:ctx} S4[g] A → I[g] A = ?


;


% --- Translation: I to Int ---
% Translate derivations from IS4 to pure intuitionistic logic

rec I_to_Int : {g:ctx} I[g] A → Int[g] A = ?


;


% --- Translation: Int to ND ---
% Translate modal-free intuitionistic logic into ND over o formulas

rec Int_to_nd : {g:ndctx} Int[g] A → nd[g] (transFml A) = ?


;



